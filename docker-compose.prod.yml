version: '3.8'

services:
  # Backend Service
  backend:
    build: 
      context: ./saas-app-backend
      dockerfile: Dockerfile.prod
    container_name: saas-backend-prod
    environment:
      - NODE_ENV=production
      - PORT=3000
      - MONGODB_URI=${MONGODB_URI:-mongodb://mongodb:27017/saas_platform_prod}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION:-24h}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - CORS_ORIGIN=${CORS_ORIGIN:-https://yourdomain.com}
    ports:
      - "3000:3000"
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - saas-network

  # Frontend Service
  frontend:
    build:
      context: ./saas-app-frontend  
      dockerfile: Dockerfile.prod
      args:
        - VITE_API_BASE_URL=${API_BASE_URL:-https://api.yourdomain.com}
        - VITE_APP_NAME=SaaS Platform MVP
        - VITE_APP_VERSION=1.0.0
    container_name: saas-frontend-prod
    ports:
      - "4200:80"
    restart: unless-stopped
    depends_on:
      - backend
    networks:
      - saas-network

  # MongoDB Service
  mongodb:
    image: mongo:6.0
    container_name: saas-mongodb-prod
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
      - MONGO_INITDB_DATABASE=saas_platform_prod
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/init.js:ro
    restart: unless-stopped
    networks:
      - saas-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: saas-redis-prod
    command: redis-server --requirepass ${REDIS_PASSWORD:-defaultpassword} --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - saas-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: saas-nginx-prod
    ports:
      - "80:80"
      - "443:443"  
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-available:/etc/nginx/sites-available:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - saas-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 3s
      retries: 3

networks:
  saas-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local