import { Component, ChangeDetectionStrategy, input, inject, signal, computed, OnInit, OnDestroy } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { Router, ActivatedRoute } from '@angular/router';
import { PlanFeatureApiService } from '../../../core/services/plan-feature-api.service';
import { MockApiService } from '../../../core/services/mock-api.service';
import { PlanFeature } from '../../../core/models/plan-feature.models';
import { Plan, Feature, FeatureCategory } from '../../../core/models/pricing.models';
import { SimpleFeatureModalComponent } from '../editor/simple-feature-modal.component';
import { SimpleCategoryModalComponent } from '../editor/simple-category-modal.component';

@Component({
  selector: 'app-plan-features',
  templateUrl: './plan-features.component.html',
  styleUrls: ['./plan-features.component.css'],
  imports: [CommonModule, FormsModule, SimpleFeatureModalComponent, SimpleCategoryModalComponent],
  changeDetection: ChangeDetectionStrategy.OnPush,
  standalone: true
})
export class PlanFeaturesComponent implements OnInit, OnDestroy {
  // Accept planId as input (when loaded from plan editor) or get from route
  planIdInput = input<string>('');

  private readonly planFeatureApi = inject(PlanFeatureApiService);
  private readonly mockApi = inject(MockApiService);
  private readonly router = inject(Router);
  private readonly route = inject(ActivatedRoute);

  // Get planId from input or route parameters
  planId = signal<string>('');

  planFeatures = signal<PlanFeature[]>([]);
  availableFeatures = signal<Feature[]>([]);
  currentPlan = signal<Plan | null>(null);
  loading = signal(false);
  // No longer using modals - navigation to dedicated page
  showCreateFeatureModal = signal(false);
  showCreateCategoryModal = signal(false);

  // Configuration d'une feature sélectionnée
  editingFeatureId = signal<string | null>(null);
  featureConfig = signal<Record<string, any>>({});
  featureLimits = signal<Record<string, number | string>>({});

  ngOnInit() {
    // Get planId from input or route parameters
    const inputPlanId = this.planIdInput();
    const routePlanId = this.route.snapshot.paramMap.get('planId');
    
    const planId = inputPlanId || routePlanId;
    
    if (planId) {
      this.planId.set(planId);
      this.loadPlanFeatures();
      this.loadAvailableFeatures();
      this.loadPlan();
    } else {
      console.error('No planId found in input or route parameters');
      console.log('Input planId:', inputPlanId);
      console.log('Route planId:', routePlanId);
    }
  }

  ngOnDestroy() {
    // Cleanup if needed - no body scroll lock needed for page navigation
  }

  private loadPlanFeatures() {
    this.loading.set(true);

    const currentPlanId = this.planId();
    // Mock data pour la démonstration
    const mockPlanFeatures: PlanFeature[] = [
      {
        _id: '1',
        plan: { _id: currentPlanId, name: 'Basic Plan' },
        feature: { _id: '1', name: 'API Requests', roleId: 'api.limit' },
        enabled: true,
        configuration: { endpoint: '/api/v1', version: '1.0' },
        limits: { requests_per_hour: 1000 },
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        _id: '2',
        plan: { _id: currentPlanId, name: 'Basic Plan' },
        feature: { _id: '11', name: 'Storage', roleId: 'storage.gb' },
        enabled: true,
        configuration: {},
        limits: { gb: 10 },
        createdAt: new Date(),
        updatedAt: new Date()
      }
    ];

    this.planFeatures.set(mockPlanFeatures);
    this.loading.set(false);
  }

  private loadAvailableFeatures() {
    const features = this.mockApi.features();
    this.availableFeatures.set(features);
  }

  private loadPlan() {
    const currentPlanId = this.planId();
    const plan = this.mockApi.getPlan(currentPlanId);
    this.currentPlan.set(plan || null);
  }

  // Modal-related computed signals removed - using dedicated page instead

  // TrackBy function for performance optimization
  trackByFeatureId(index: number, feature: Feature): string {
    return feature.id;
  }

  // Modal-related methods removed - using dedicated page instead

  // Body scroll lock methods removed - not needed for page navigation

  openAddFeatureDialog() {
    // Navigate to the dedicated add features page
    const currentPlanId = this.planId();
    this.router.navigate(['/plans', currentPlanId, 'add-features']);
  }

  // Modal methods removed - using dedicated page instead

  // Feature addition now handled by dedicated page

  toggleFeatureEnabled(planFeature: PlanFeature) {
    // Mock implementation
    this.planFeatures.update(features =>
      features.map(f =>
        f._id === planFeature._id
          ? { ...f, enabled: !f.enabled }
          : f
      )
    );
  }

  removeFeatureFromPlan(planFeature: PlanFeature) {
    if (!confirm(`Are you sure you want to remove "${planFeature.feature.name}" from this plan?`)) {
      return;
    }

    // Mock implementation
    this.planFeatures.update(features =>
      features.filter(f => f._id !== planFeature._id)
    );
  }

  startEditingFeature(planFeature: PlanFeature) {
    this.editingFeatureId.set(planFeature._id);
    this.featureConfig.set({ ...planFeature.configuration });
    this.featureLimits.set({ ...planFeature.limits });
  }

  cancelEditingFeature() {
    this.editingFeatureId.set(null);
    this.featureConfig.set({});
    this.featureLimits.set({});
  }

  saveFeatureConfiguration(planFeature: PlanFeature) {
    // Mock implementation
    this.planFeatures.update(features =>
      features.map(f =>
        f._id === planFeature._id
          ? { ...f, configuration: this.featureConfig(), limits: this.featureLimits() }
          : f
      )
    );
    this.cancelEditingFeature();
  }

  updateConfigField(key: string, value: any) {
    this.featureConfig.update(config => ({ ...config, [key]: value }));
  }

  updateLimitField(key: string, value: number | string) {
    this.featureLimits.update(limits => ({ ...limits, [key]: value }));
  }

  getConfigKeys(config: Record<string, any>): string[] {
    return Object.keys(config);
  }

  getLimitKeys(limits: Record<string, number | string>): string[] {
    return Object.keys(limits);
  }

  addNewConfigField(planFeature: PlanFeature) {
    const key = prompt('Enter configuration key:');
    if (key && key.trim()) {
      this.updateConfigField(key.trim(), '');
    }
  }

  addNewLimitField(planFeature: PlanFeature) {
    const key = prompt('Enter limit key:');
    if (key && key.trim()) {
      this.updateLimitField(key.trim(), 0);
    }
  }

  removeConfigField(key: string) {
    this.featureConfig.update(config => {
      const newConfig = { ...config };
      delete newConfig[key];
      return newConfig;
    });
  }

  removeLimitField(key: string) {
    this.featureLimits.update(limits => {
      const newLimits = { ...limits };
      delete newLimits[key];
      return newLimits;
    });
  }

  openCreateFeatureModal() {
    this.showCreateFeatureModal.set(true);
  }

  openCreateCategoryModal() {
    this.showCreateCategoryModal.set(true);
  }

  onFeatureCreated(feature: Feature) {
    console.log('Feature created:', feature);
    
    // Close the modal
    this.showCreateFeatureModal.set(false);
    
    // Automatically add the new feature to the current plan
    this.addFeatureToPlanDirectly(feature);
    
    // Refresh the available features
    this.loadAvailableFeatures();
  }

  private addFeatureToPlanDirectly(feature: Feature) {
    // Create a new plan feature
    const currentPlanId = this.planId();
    const newPlanFeature: PlanFeature = {
      _id: Date.now().toString(),
      plan: { _id: currentPlanId, name: this.currentPlan()?.name || 'Plan' },
      feature: { _id: feature.id, name: feature.name, roleId: feature.key },
      enabled: feature.enabledByDefault || false,
      configuration: {},
      limits: {},
      createdAt: new Date(),
      updatedAt: new Date()
    };

    // Add to the current plan features
    this.planFeatures.update(features => [...features, newPlanFeature]);
    
    console.log('Feature automatically added to plan:', newPlanFeature);
  }

  onCategoryCreated(category: FeatureCategory) {
    console.log('Category created:', category);
    
    // Close the modal
    this.showCreateCategoryModal.set(false);
    
    // Refresh the available categories
    this.loadAvailableFeatures();
  }

  onFeatureModalClosed() {
    this.showCreateFeatureModal.set(false);
  }

  onCategoryModalClosed() {
    this.showCreateCategoryModal.set(false);
  }
}
