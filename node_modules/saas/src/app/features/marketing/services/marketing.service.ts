import { Injectable, inject } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

export interface MarketingCampaign {
  _id: string;
  application: string;
  name: string;
  description?: string;
  type: 'AB_TEST' | 'PRICING_TEST' | 'LANDING_PAGE' | 'EMAIL_CAMPAIGN' | 'CONVERSION_OPTIMIZATION';
  status: 'DRAFT' | 'ACTIVE' | 'PAUSED' | 'COMPLETED' | 'ARCHIVED';
  configuration: Record<string, any>;
  targetAudience: Record<string, any>;
  startDate?: Date;
  endDate?: Date;
  variants: {
    control: Record<string, any>;
    variations: Record<string, any>[];
  };
  metrics: {
    impressions?: number;
    clicks?: number;
    conversions?: number;
    conversionRate?: number;
    revenue?: number;
    cost?: number;
    roi?: number;
  };
  createdAt: Date;
  updatedAt: Date;
}

export interface AnalyticsEvent {
  _id: string;
  application: string;
  campaign?: string;
  eventType: 'PAGE_VIEW' | 'WIDGET_VIEW' | 'BUTTON_CLICK' | 'FORM_SUBMIT' | 'SIGNUP' | 'CONVERSION' | 'PURCHASE' | 'TRIAL_START' | 'SUBSCRIPTION' | 'CUSTOM';
  eventName: string;
  properties: Record<string, any>;
  userId?: string;
  sessionId?: string;
  visitorId?: string;
  variantId?: string;
  userAgent: Record<string, any>;
  location: Record<string, any>;
  referrer?: string;
  utm?: Record<string, any>;
  revenue?: number;
  timestamp: Date;
}

export interface CreateCampaignDto {
  applicationId: string;
  name: string;
  description?: string;
  type: 'AB_TEST' | 'PRICING_TEST' | 'LANDING_PAGE' | 'EMAIL_CAMPAIGN' | 'CONVERSION_OPTIMIZATION';
  configuration?: Record<string, any>;
  targetAudience?: Record<string, any>;
  startDate?: Date;
  endDate?: Date;
  variants?: Record<string, any>;
}

export interface TrackEventDto {
  applicationId: string;
  campaignId?: string;
  eventType: 'PAGE_VIEW' | 'WIDGET_VIEW' | 'BUTTON_CLICK' | 'FORM_SUBMIT' | 'SIGNUP' | 'CONVERSION' | 'PURCHASE' | 'TRIAL_START' | 'SUBSCRIPTION' | 'CUSTOM';
  eventName: string;
  properties?: Record<string, any>;
  userId?: string;
  sessionId?: string;
  visitorId?: string;
  variantId?: string;
  utm?: Record<string, any>;
  revenue?: number;
}

@Injectable({
  providedIn: 'root'
})
export class MarketingService {
  private readonly http = inject(HttpClient);
  private readonly baseUrl = 'http://localhost:3000';

  // Campaign Management
  createCampaign(campaign: CreateCampaignDto): Observable<{ success: boolean; data: MarketingCampaign; message: string }> {
    // Return mock data instead of making HTTP request
    const newCampaign: MarketingCampaign = {
      _id: Date.now().toString(),
      application: campaign.applicationId,
      name: campaign.name,
      description: campaign.description,
      type: campaign.type,
      status: 'DRAFT',
      configuration: campaign.configuration || {},
      targetAudience: campaign.targetAudience || {},
      startDate: campaign.startDate,
      endDate: campaign.endDate,
      variants: {
        control: {},
        variations: []
      },
      metrics: {
        impressions: 0,
        clicks: 0,
        conversions: 0,
        conversionRate: 0,
        revenue: 0,
        cost: 0,
        roi: 0
      },
      createdAt: new Date(),
      updatedAt: new Date()
    };

    return new Observable(observer => {
      setTimeout(() => {
        observer.next({
          success: true,
          data: newCampaign,
          message: 'Campaign created successfully'
        });
        observer.complete();
      }, 100);
    });
  }

  getCampaignsByApplication(applicationId: string): Observable<{ success: boolean; data: MarketingCampaign[]; count: number }> {
    // Return mock data instead of making HTTP request
    const mockCampaigns: MarketingCampaign[] = [
      {
        _id: '1',
        application: applicationId,
        name: 'Welcome Email Campaign',
        description: 'Welcome new users with personalized onboarding',
        type: 'EMAIL_CAMPAIGN',
        status: 'ACTIVE',
        configuration: { subject: 'Welcome to our platform!' },
        targetAudience: { segment: 'new_users' },
        startDate: new Date('2024-01-01'),
        endDate: new Date('2024-12-31'),
        variants: {
          control: { template: 'welcome_v1' },
          variations: [
            { template: 'welcome_v2', subject: 'Welcome! Get started today' },
            { template: 'welcome_v3', subject: 'Your journey begins here' }
          ]
        },
        metrics: {
          impressions: 1250,
          clicks: 89,
          conversions: 23,
          conversionRate: 1.84,
          revenue: 1250.00,
          cost: 45.00,
          roi: 26.78
        },
        createdAt: new Date('2024-01-01'),
        updatedAt: new Date('2024-01-15')
      },
      {
        _id: '2',
        application: applicationId,
        name: 'Pricing Page A/B Test',
        description: 'Test different pricing displays to improve conversion',
        type: 'PRICING_TEST',
        status: 'ACTIVE',
        configuration: { page: 'pricing' },
        targetAudience: { segment: 'pricing_page_visitors' },
        startDate: new Date('2024-01-10'),
        endDate: new Date('2024-02-10'),
        variants: {
          control: { layout: 'standard' },
          variations: [
            { layout: 'highlighted', emphasis: 'popular' },
            { layout: 'minimal', focus: 'value' }
          ]
        },
        metrics: {
          impressions: 2100,
          clicks: 156,
          conversions: 34,
          conversionRate: 1.62,
          revenue: 2100.00,
          cost: 0,
          roi: 0
        },
        createdAt: new Date('2024-01-10'),
        updatedAt: new Date('2024-01-20')
      },
      {
        _id: '3',
        application: applicationId,
        name: 'Landing Page Optimization',
        description: 'Optimize landing page for better user engagement',
        type: 'LANDING_PAGE',
        status: 'COMPLETED',
        configuration: { page: 'landing' },
        targetAudience: { segment: 'all_visitors' },
        startDate: new Date('2023-12-01'),
        endDate: new Date('2023-12-31'),
        variants: {
          control: { design: 'original' },
          variations: [
            { design: 'modern', cta: 'prominent' },
            { design: 'minimal', cta: 'subtle' }
          ]
        },
        metrics: {
          impressions: 5400,
          clicks: 432,
          conversions: 89,
          conversionRate: 1.65,
          revenue: 5400.00,
          cost: 120.00,
          roi: 44.0
        },
        createdAt: new Date('2023-12-01'),
        updatedAt: new Date('2023-12-31')
      }
    ];

    return new Observable(observer => {
      setTimeout(() => {
        observer.next({
          success: true,
          data: mockCampaigns,
          count: mockCampaigns.length
        });
        observer.complete();
      }, 100); // Simulate network delay
    });
  }

  getCampaignById(campaignId: string): Observable<{ success: boolean; data: MarketingCampaign }> {
    // Return mock data instead of making HTTP request
    const mockCampaign: MarketingCampaign = {
      _id: campaignId,
      application: '507f1f77bcf86cd799439011',
      name: 'Sample Campaign',
      description: 'A sample marketing campaign for testing',
      type: 'EMAIL_CAMPAIGN',
      status: 'ACTIVE',
      configuration: { subject: 'Test Campaign' },
      targetAudience: { segment: 'test_users' },
      startDate: new Date('2024-01-01'),
      endDate: new Date('2024-12-31'),
      variants: {
        control: { template: 'control' },
        variations: [
          { template: 'variation_1' },
          { template: 'variation_2' }
        ]
      },
      metrics: {
        impressions: 1000,
        clicks: 50,
        conversions: 10,
        conversionRate: 1.0,
        revenue: 500.00,
        cost: 25.00,
        roi: 19.0
      },
      createdAt: new Date('2024-01-01'),
      updatedAt: new Date('2024-01-15')
    };

    return new Observable(observer => {
      setTimeout(() => {
        observer.next({
          success: true,
          data: mockCampaign
        });
        observer.complete();
      }, 100);
    });
  }

  updateCampaign(campaignId: string, updateData: Partial<MarketingCampaign>): Observable<{ success: boolean; data: MarketingCampaign; message: string }> {
    return this.http.put<{ success: boolean; data: MarketingCampaign; message: string }>(
      `${this.baseUrl}/marketing/${campaignId}`,
      updateData
    );
  }

  deleteCampaign(campaignId: string): Observable<{ success: boolean; message: string }> {
    return this.http.delete<{ success: boolean; message: string }>(
      `${this.baseUrl}/marketing/${campaignId}`
    );
  }

  startCampaign(campaignId: string): Observable<{ success: boolean; data: MarketingCampaign; message: string }> {
    return this.http.put<{ success: boolean; data: MarketingCampaign; message: string }>(
      `${this.baseUrl}/marketing/${campaignId}/start`,
      {}
    );
  }

  pauseCampaign(campaignId: string): Observable<{ success: boolean; data: MarketingCampaign; message: string }> {
    return this.http.put<{ success: boolean; data: MarketingCampaign; message: string }>(
      `${this.baseUrl}/marketing/${campaignId}/pause`,
      {}
    );
  }

  completeCampaign(campaignId: string): Observable<{ success: boolean; data: MarketingCampaign; message: string }> {
    return this.http.put<{ success: boolean; data: MarketingCampaign; message: string }>(
      `${this.baseUrl}/marketing/${campaignId}/complete`,
      {}
    );
  }

  // Analytics
  trackEvent(event: TrackEventDto): Observable<{ success: boolean; data: AnalyticsEvent; message: string }> {
    return this.http.post<{ success: boolean; data: AnalyticsEvent; message: string }>(
      `${this.baseUrl}/marketing/track`,
      event
    );
  }

  getCampaignAnalytics(
    campaignId: string,
    startDate?: Date,
    endDate?: Date
  ): Observable<{ success: boolean; data: any }> {
    let url = `${this.baseUrl}/marketing/${campaignId}/analytics`;

    const params = new URLSearchParams();
    if (startDate) params.append('startDate', startDate.toISOString());
    if (endDate) params.append('endDate', endDate.toISOString());

    if (params.toString()) {
      url += `?${params.toString()}`;
    }

    return this.http.get<{ success: boolean; data: any }>(url);
  }

  // Public tracking for external websites
  trackPublicEvent(event: TrackEventDto): Observable<{ success: boolean; eventId: string; timestamp: Date }> {
    return this.http.post<{ success: boolean; eventId: string; timestamp: Date }>(
      `${this.baseUrl}/public/analytics/track`,
      event
    );
  }

  // Utility methods for generating tracking code
  generateTrackingScript(applicationId: string, campaignId?: string): string {
    return `
<!-- SaaS Marketing Analytics -->
<script>
(function() {
  const SAAS_CONFIG = {
    applicationId: '${applicationId}',
    campaignId: ${campaignId ? `'${campaignId}'` : 'null'},
    apiUrl: '${this.baseUrl}/public/analytics'
  };

  // Generate visitor ID
  let visitorId = localStorage.getItem('saas_visitor_id');
  if (!visitorId) {
    visitorId = 'visitor_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    localStorage.setItem('saas_visitor_id', visitorId);
  }

  // Generate session ID
  let sessionId = sessionStorage.getItem('saas_session_id');
  if (!sessionId) {
    sessionId = 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    sessionStorage.setItem('saas_session_id', sessionId);
  }

  // Extract UTM parameters
  function getUtmParameters() {
    const urlParams = new URLSearchParams(window.location.search);
    return {
      source: urlParams.get('utm_source'),
      medium: urlParams.get('utm_medium'),
      campaign: urlParams.get('utm_campaign'),
      term: urlParams.get('utm_term'),
      content: urlParams.get('utm_content')
    };
  }

  // Track event function
  window.saasTrack = function(eventType, eventName, properties, revenue) {
    const eventData = {
      applicationId: SAAS_CONFIG.applicationId,
      campaignId: SAAS_CONFIG.campaignId,
      eventType: eventType || 'CUSTOM',
      eventName: eventName,
      properties: properties || {},
      visitorId: visitorId,
      sessionId: sessionId,
      utm: getUtmParameters(),
      revenue: revenue || 0
    };

    fetch(SAAS_CONFIG.apiUrl + '/track', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(eventData)
    }).catch(function(error) {
      console.warn('SaaS Analytics: Failed to track event', error);
    });
  };

  // Auto-track page view
  window.saasTrack('PAGE_VIEW', 'page_view', {
    page: window.location.pathname,
    title: document.title,
    referrer: document.referrer
  });

  // Track clicks on buttons with data-saas-track attribute
  document.addEventListener('click', function(event) {
    const element = event.target;
    if (element.hasAttribute('data-saas-track')) {
      const eventName = element.getAttribute('data-saas-track') || 'button_click';
      const properties = {
        element: element.tagName,
        text: element.textContent || element.value,
        id: element.id,
        className: element.className
      };
      window.saasTrack('BUTTON_CLICK', eventName, properties);
    }
  });
})();
</script>`;
  }

  generateTrackingPixel(applicationId: string, campaignId?: string): string {
    const params = new URLSearchParams({
      applicationId,
      ...(campaignId && { campaignId })
    });

    return `<img src="${this.baseUrl}/public/analytics/pixel.gif?${params.toString()}" width="1" height="1" style="display:none;" alt="">`;
  }
}
